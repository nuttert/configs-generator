{{#models}}{{#model}}
#include "{{classname}}.hpp"
#include <regex> 
#include "log.hh"
#include <boost/algorithm/string/replace.hpp>
{{#vendorExtensions.x-dependednt-model}}
{{#vendorExtensions.x-shared-ptr-imports}}
{{{.}}}
{{/vendorExtensions.x-shared-ptr-imports}}
{{/vendorExtensions.x-dependednt-model}}

namespace {{#modelNamespaceDeclarations}}{{this}}{{^-last}}::{{/-last}}{{/modelNamespaceDeclarations}}{


{{#isEnum}}

{{classname}}::{{classname}}()
{
}
{{classname}}::{{classname}}(const e{{classname}} value){
    setValue(value);
}

{{classname}}::~{{classname}}()
{
}

void {{classname}}::validate()
{
    // TODO: implement validation
}

 bool {{classname}}::operator==(const e{{classname}} rhs) const{
     return value == rhs;
 }

void {{classname}}::toJson(JsonValueRef val) const
{

    {{#allowableValues}}{{#enumVars}}
    if (this->value == e{{classname}}::k{{{name}}}) val = {{{value}}};
    {{/enumVars}}{{/allowableValues}}
}

bool {{classname}}::fromJson(const JsonValue& val)
{
    const auto s = val.as_string();

    {{#allowableValues}}{{#enumVars}}
    {{^-first}}else {{/-first}}if (s == {{{value}}}) this->value = e{{classname}}::k{{{name}}};{{/enumVars}}{{/allowableValues}}
    else{
        logError("Incorrect value: '{}' not in e{{classname}}", s);
        return false;
    }
    return true;
}
std::string {{classname}}::toString()
{
    std::string s;

    {{#allowableValues}}{{#enumVars}}
    if (this->value == e{{classname}}::k{{{name}}}) s = {{{value}}};{{/enumVars}}{{/allowableValues}}
    return s;
}


{{classname}}::e{{classname}} {{classname}}::getValue() const
{
   return value;
}

void {{classname}}::setValue({{classname}}::e{{classname}} const value)
{
   this->value = value;
}

{{/isEnum}}

{{^isEnum}}


{{#vars}}
{{^isInherited}}
{{#isEnum}}
void {{#vendorExtensions.x-internal}}{{classname}}::{{/vendorExtensions.x-internal}}toJson(JsonValueRef val, const {{#camelcase}}e{{name}}{{/camelcase}} inp_value)
{

    {{#allowableValues}}{{#enumVars}}
    if (inp_value == {{#camelcase}}e_{{baseName}}{{/camelcase}}::k{{{name}}}) val = {{{value}}};
    {{/enumVars}}{{/allowableValues}}

}
bool {{#vendorExtensions.x-internal}}{{classname}}::{{/vendorExtensions.x-internal}}fromJson({{#camelcase}}e{{name}}{{/camelcase}}& inp_value, const JsonValue& val)
{
    const auto s = val.as_string();

    {{#allowableValues}}{{#enumVars}}
    {{^-first}}else {{/-first}}if (s == {{{value}}}) inp_value = {{#camelcase}}e_{{baseName}}{{/camelcase}}::k{{{name}}};{{/enumVars}}{{/allowableValues}}
    else{
        logError("Incorrect value: '{}' not in e{{classname}}", s);
        return false;
    }
    return true;
}
{{/isEnum}}
{{/isInherited}}
{{/vars}}


{{^oneOf}}
{{classname}}::{{classname}}()
{
    {{#vars}}
    {{^isEnum}}
    {{#required}}
    {{^isInherited}}
    {{^isContainer}}
    {{#isPrimitiveType}}
    {{#snakecase}}{{name}}{{/snakecase}} = {{{defaultValue}}};
    {{/isPrimitiveType}}
    {{^isPrimitiveType}}
    {{#isString}}
    {{#snakecase}}{{name}}{{/snakecase}} = {{{defaultValue}}};
    {{/isString}}
    {{#isDateTime}}
    {{#snakecase}}{{name}}{{/snakecase}} = {{{defaultValue}}};
    {{/isDateTime}}
    {{/isPrimitiveType}}
    {{/isContainer}}
    {{/isInherited}}
    {{/required}}
    {{^required}}
    {{^isContainer}}
    {{/isContainer}}
    {{/required}}
    {{/isEnum}}
    {{/vars}}
}

{{classname}}::~{{classname}}()
{
}

void {{classname}}::validate()
{
    // TODO: implement validation
}

void {{classname}}::toJson(JsonObjectRef val) const
{
    val.set(rabbit::object_tag{});

    {{#allParents}}
    {
        const auto parent_val = this->{{.}}::toJson(val);
    }
    {{/allParents}}
    
    BaseModel::toJson(val["_id"], id__);

    {{#vars}}{{^isInherited}}
    {{^isEnum}}
    {{^required}}
    {{^isContainer}}
    if({{#snakecase}}{{name}}{{/snakecase}})
    {
        BaseModel::toJson(val["{{baseName}}"], {{#snakecase}}{{name}}{{/snakecase}});
    }
    {{/isContainer}}
    {{#isContainer}}
    if(!{{#snakecase}}{{name}}{{/snakecase}}.empty())
    {
        BaseModel::toJson(val["{{baseName}}"], {{#snakecase}}{{name}}{{/snakecase}});
    }
    {{/isContainer}}
    {{/required}}{{/isEnum}}{{/isInherited}}{{/vars}}
    {{#vars}}{{^isInherited}}{{^isEnum}}
    {{#required}} BaseModel::toJson(val["{{baseName}}"], {{#snakecase}}{{name}}{{/snakecase}});
    {{/required}}{{/isEnum}}{{/isInherited}}{{/vars}}
    {{#vars}}{{^isInherited}}
    {{#isEnum}}
    {{^required}}
    if({{#snakecase}}{{name}}{{/snakecase}})
    {
        {{#allowableValues}}{{#enumVars}}
        if (*{{#snakecase}}{{baseName}}{{/snakecase}} == {{#camelcase}}e_{{baseName}}{{/camelcase}}::k{{{name}}}) val["{{baseName}}"] =  {{{value}}};
        {{/enumVars}}{{/allowableValues}}
    }
    {{/required}}
    {{#required}}
    {{#allowableValues}}{{#enumVars}}
    if ({{#snakecase}}{{baseName}}{{/snakecase}} == {{#camelcase}}e_{{baseName}}{{/camelcase}}::k{{{name}}}) val["{{baseName}}"] =  {{{value}}};
    {{/enumVars}}{{/allowableValues}}
    {{/required}}
    {{/isEnum}}
    {{/isInherited}}{{/vars}}
}

bool {{classname}}::fromJson(const ConstJsonObject& val)
{
    bool ok = true;
    {{#allParents}}
    ok &= this->{{.}}::fromJson(val);
    {{/allParents}}

    if(val.has("_id"))
    {
        const ConstJsonObject id_info = val["_id"];
        id__ = id_info["$oid"].as_string();
    } else {
        logWarn("{{classname}} must have _id field");
        ok = false;
    }

    {{#vars}}{{^isEnum}}{{^required}}
    {{^isInherited}}
    if(val.has("{{baseName}}"))
    {
        bool local_ok = true;
        const auto& fieldValue = val.at("{{baseName}}");
        if(!fieldValue.is_null())
        {
            {{{dataType}}} refVal_{{#snakecase}}{{baseName}}{{/snakecase}};
            local_ok = BaseModel::fromJson(fieldValue, refVal_{{#snakecase}}{{baseName}}{{/snakecase}});
            ok &= local_ok;
            {{setter}}(std::move(refVal_{{#snakecase}}{{baseName}}{{/snakecase}}));
        }
        if(!local_ok){
            logWarn("{{baseName}} field parsing error in {{classname}} or std::variant trying(this is ok)");
            ok = false;
        }
    }
    {{/isInherited}}{{/required}}
    {{#required}}
    try{
        const auto& fieldValue = val.at("{{baseName}}");
        bool local_ok = true;
        if(!fieldValue.is_null())
        {
            {{{dataType}}} refVal_{{#snakecase}}{{baseName}}{{/snakecase}};
            local_ok = BaseModel::fromJson(fieldValue, refVal_{{#snakecase}}{{baseName}}{{/snakecase}});
            ok &= local_ok;
            {{setter}}(std::move(refVal_{{#snakecase}}{{baseName}}{{/snakecase}}));
        }else{
            logWarn("{{baseName}} is required filed in config {{classname}} or std::variant trying(this is ok)");
            throw std::runtime_error("{{baseName}} is required filed in config {{classname}}");
        }
        if(!local_ok){
            logWarn("{{baseName}} field parsing error in {{classname}} or std::variant trying(this is ok)");
            ok = false;
        }
    }catch(std::exception& e){
        logWarn("std::variant trying(this is ok) or required field {{baseName}} not found in {{classname}} : {}",e.what());
        ok = false;
    }
    {{/required}}{{/isEnum}}{{/vars}}

    {{#vars}}{{^isInherited}}
    {{#isEnum}}
    {{^required}}
    try{
    if(val.has("{{baseName}}"))
    {
        const auto& fieldValue = val.at("{{baseName}}");
        if(!fieldValue.is_null())
        {
            auto value_str_{{#snakecase}}{{baseName}}{{/snakecase}} = fieldValue.as_string();
            {{#allowableValues}}{{#enumVars}}
            {{^-first}}else {{/-first}}if (value_str_{{#snakecase}}{{baseName}}{{/snakecase}} == {{{value}}}) {{#snakecase}}{{baseName}}{{/snakecase}} = {{#camelcase}}e_{{baseName}}{{/camelcase}}::k{{{name}}};{{/enumVars}}{{/allowableValues}}
            else{
                logWarn("Can't convert string '{}' to enum class '{{#snakecase}}{{baseName}}{{/snakecase}}' or std::variant trying(this is ok)",value_str_{{#snakecase}}{{baseName}}{{/snakecase}});
                ok = false;
            }
        }
    }
    }catch(std::exception& e){
        logWarn("std::variant trying(this is ok) or field {{baseName}} in {{classname}}parsing error : {}",e.what());
        ok = false;
    }
    {{/required}}
    {{#required}}
    try{
        const auto& fieldValue = val.at("{{baseName}}");
        if(!fieldValue.is_null())
        {
            auto value_str_{{#snakecase}}{{baseName}}{{/snakecase}} = fieldValue.as_string();
            {{#allowableValues}}{{#enumVars}}
            {{^-first}}else {{/-first}}if (value_str_{{#snakecase}}{{baseName}}{{/snakecase}} == {{{value}}}) {{#snakecase}}{{baseName}}{{/snakecase}} = {{#camelcase}}e_{{baseName}}{{/camelcase}}::k{{{name}}};{{/enumVars}}{{/allowableValues}}
            else{
                logWarn("Can't convert string '{}' to enum class {{#snakecase}}{{baseName}}{{/snakecase}} or std::variant trying(this is ok)",value_str_{{#snakecase}}{{baseName}}{{/snakecase}});
                ok = false;
            }
        }else{
            logWarn("{{baseName}} is required filed in config {{classname}} or std::varint trying(this is ok)");
            throw std::runtime_error("{{baseName}} is required filed in config {{classname}}");
        }
    }catch(std::exception& e){
        logError("std::variant trying(this is ok) or required field {{baseName}} not found in {{classname}} : {}",e.what());
        ok = false;
    }
    {{/required}}
    {{/isEnum}}
    {{/isInherited}}{{/vars}}
   
    return ok;
}

bool {{classname}}::updateFromJson(const ConstJsonObject& val)
{
    bool ok = true;
    {{#allParents}}
    ok &= this->{{.}}::updateFromJson(val);
    {{/allParents}}

    {{#vars}}{{^isEnum}}
    {{^isInherited}}
    if(val.has("{{baseName}}"))
    {
        bool local_ok = true;
        const auto& fieldValue = val.at("{{baseName}}");
        if(!fieldValue.is_null())
        {
            {{{dataType}}} refVal_{{#snakecase}}{{baseName}}{{/snakecase}};
            local_ok = BaseModel::fromJson(fieldValue, refVal_{{#snakecase}}{{baseName}}{{/snakecase}});
            ok &= local_ok;
            {{setter}}(std::move(refVal_{{#snakecase}}{{baseName}}{{/snakecase}}));
        }
        if(!local_ok){
            logWarn("{{baseName}} field parsing error in {{classname}} or std::variant trying(this is ok)");
            ok = false;
        }
    }
    {{/isInherited}}
    {{/isEnum}}{{/vars}}

    {{#vars}}{{^isInherited}}
    {{#isEnum}}
    try{
    if(val.has("{{baseName}}"))
    {
        const auto& fieldValue = val.at("{{baseName}}");
        if(!fieldValue.is_null())
        {
            auto value_str_{{#snakecase}}{{baseName}}{{/snakecase}} = fieldValue.as_string();
            {{#allowableValues}}{{#enumVars}}
            {{^-first}}else {{/-first}}if (value_str_{{#snakecase}}{{baseName}}{{/snakecase}} == {{{value}}}) {{#snakecase}}{{baseName}}{{/snakecase}} = {{#camelcase}}e_{{baseName}}{{/camelcase}}::k{{{name}}};{{/enumVars}}{{/allowableValues}}
            else{
                logWarn("Can't convert string '{}' to enum class '{{#snakecase}}{{baseName}}{{/snakecase}}' or std::variant trying(this is ok)",value_str_{{#snakecase}}{{baseName}}{{/snakecase}});
                ok = false;
            }
        }
    }
    }catch(std::exception& e){
        logWarn("std::variant trying(this is ok) or field {{baseName}} in {{classname}}parsing error : {}",e.what());
        ok = false;
    }
    {{/isEnum}}
    {{/isInherited}}{{/vars}}
   
    return ok;
}

{{#vars}}
{{^isInherited}}{{^isEnum}}
{{#isContainer}}
{{{dataType}}}& {{classname}}::{{getter}}()
{
    return {{#snakecase}}{{name}}{{/snakecase}};
}{{/isContainer}}
{{^isContainer}}{{^required}}{{#optional}}{{{dataType}}}{{/optional}}{{/required}}{{#required}}{{{dataType}}}{{/required}}  {{classname}}::{{getter}}() const
{
    return {{#snakecase}}{{name}}{{/snakecase}};
}
{{/isContainer}}

{{#isPrimitiveType}}
void {{classname}}::{{setter}}({{^required}}{{#optional}}{{{dataType}}}{{/optional}}{{/required}}{{#required}}{{{dataType}}}{{/required}} value)
{{/isPrimitiveType}}
{{^isPrimitiveType}}
void {{classname}}::{{setter}}(const 
    {{^isInherited}}
    {{^isEnum}}
    {{^required}}{{^isContainer}}{{#optional}}{{{dataType}}}{{/optional}}{{/isContainer}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{/required}}{{#required}}{{{dataType}}}{{/required}}
    {{/isEnum}}
    {{#isEnum}}
    {{^required}}{{#optional}}{{#camelcase}}e{{name}}{{/camelcase}}{{/optional}}{{/required}}{{#required}}{{#camelcase}}e{{name}}{{/camelcase}}{{/required}}
    {{/isEnum}}
    {{/isInherited}}
    & value)
{{/isPrimitiveType}}
{
    {{#isNumeric}}
    {{#maximum}}
    if(value > {{maximum}}) throw std::runtime_error(std::string("Value more than maximum {{maximum}}! See yaml docs"));
    {{/maximum}}
    {{#minimum}}
    if(value < {{minimum}}) throw std::runtime_error(std::string("Value less than minimum {{minimum}}! See yaml docs"));
    {{/minimum}}
    {{/isNumeric}}
    {{#isString}}
    {{#maxLength}}
    if({{^required}}value && {{/required}}value{{#required}}.{{/required}}{{^required}}->{{/required}}size() > {{maxLength}}) throw std::runtime_error(std::string("Value has length more than maximum {{maxLength}}! See yaml docs"));
    {{/maxLength}}
    {{#minLength}}
    if({{^required}}value && {{/required}} value{{#required}}.{{/required}}{{^required}}->{{/required}}size() < {{minLength}}) throw std::runtime_error(std::string("Value has length less minimum {{minLength}}! See yaml docs"));
    {{/minLength}}
    {{#vendorExtensions.x-pattern}}
    
    if({{^required}}value && {{/required}} !std::regex_match({{^required}}*{{/required}} value, std::regex("{{#checkparse}}{{vendorExtensions.x-pattern}}{{/checkparse}}"))) 
        throw std::runtime_error(std::string("String is not suitable for regex : {{#checkparse}}{{vendorExtensions.x-pattern}}{{/checkparse}}! See yaml docs"));
    {{/vendorExtensions.x-pattern}}
    {{/isString}}
    {{#isContainer}}
    {{#maxLength}}
    if(value.size() > {{maxLength}}) throw std::runtime_error(std::string("Value has length more than maximum {{maxLength}}! See yaml docs"));
    {{/maxLength}}
    {{#minLength}}
    if(value.size() < {{minLength}}) throw std::runtime_error(std::string("Value has length less minimum {{minLength}}! See yaml docs"));
    {{/minLength}}
    {{/isContainer}}
    this->{{#snakecase}}{{name}}{{/snakecase}} = value;
}
{{/isEnum}}
{{#isEnum}}
{{^vendorExtensions.x-internal}}{{^required}}{{#optional}}{{#camelcase}}e{{name}}{{/camelcase}}{{/optional}}{{/required}}{{#required}}{{#camelcase}}e{{name}}{{/camelcase}}{{/required}}{{/vendorExtensions.x-internal}} 
{{#vendorExtensions.x-internal}}{{^required}}{{#optional}}{{classname}}::{{#camelcase}}e{{name}}{{/camelcase}}{{/optional}}{{/required}}{{#required}}{{#camelcase}}e{{name}}{{/camelcase}}{{/required}}{{/vendorExtensions.x-internal}} 
{{classname}}::{{getter}}() const{
    return this->{{#snakecase}}{{name}}{{/snakecase}};
}
void {{classname}}::{{setter}}({{#camelcase}}e{{name}}{{/camelcase}} value){
    this->{{#snakecase}}{{name}}{{/snakecase}} = value;
}
{{/isEnum}} 
{{/isInherited}}
{{/vars}}

std::string {{classname}}::getInternalId() const { return id__; }
void {{classname}}::setInternalId(const std::string& new_id) {  id__ = new_id; }

bool {{classname}}::operator==(const {{classname}}& rhs) const{
    return 
    {{#vars}}
    {{#snakecase}}{{name}}{{/snakecase}} == rhs.{{#snakecase}}{{name}}{{/snakecase}} {{^-last}}&&{{/-last}}
    {{/vars}} 
    {{#allParents}}
    {{#vars}}
    {{#-first}}&&{{/-first}}
    {{/vars}}
    this->{{.}}::operator==(rhs) {{^-last}}&&{{/-last}}
    {{/allParents}}
    ;
}
{{/oneOf}}
{{/isEnum}}


} //{{#modelNamespaceDeclarations}}::{{this}}{{/modelNamespaceDeclarations}}


{{/model}}
{{/models}}
